# -*- coding: utf-8 -*-
"""project2-620.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bbnd8zMkBpTnOa3CT-oIAARMFnlpSo4E

Identify a large 2-node network datasetâ€”you can start with a dataset in a repository.  
    Your data should meet the criteria that it consists of ties between and not within two (or more) distinct groups.
    Reduce the size of the network using a method such as the island method described in chapter 4 of social network analysis.
    What can you infer about each of the distinct groups?

You may work in a small group on the project.

Your code and analysis should be delivered in an IPython Notebook by end of day Sunday.
"""

import pandas as pd

url = 'https://raw.githubusercontent.com/juliaDataScience-22/project1-620/main/data-MI.csv'

try:
    data = pd.read_csv(url, delimiter=',', na_values=['NaN', 'null', ''], on_bad_lines='skip')
    print(data.head())
except pd.errors.ParserError as e:
    print(f"ParserError: {e}")

"""Need to reduce the size of the network. Determine which groups to use for this assignment. Variables I included: gender, age, years without hypertension (high blood pressure), time from heart attack to hospital, and lethal outcome."""

import networkx as nx
import matplotlib.pyplot as plt

# Assuming 'data' is your DataFrame containing user information

# Create a graph from the data
g = nx.Graph()

# Add nodes (users) with attributes
for index, row in data.iterrows():
    g.add_node(row['ID'], gender=row['SEX'], age=row['AGE'], years_no_hypertension=row['DLIT_AG'], time_to_hospital=row['TIME_B_S'], lethal_outcome=row['LET_IS'])

# Add edges (hypothetical connections) between users with the same age
for node1 in g.nodes(data=True):
    for node2 in g.nodes(data=True):
        if node1 != node2 and node1[1]['age'] == node2[1]['age']:
            g.add_edge(node1[0], node2[0])

# Draw the graph
pos = nx.spring_layout(g)  # Use 'g' instead of 'G'
nx.draw(g, pos, with_labels=True, node_color='skyblue', node_size=500, font_size=10, font_color='black')

# Display node attributes as labels
labels = {node: f"{node}\nGender: {data['gender']}\nAge: {data['age']}" for node, data in g.nodes(data=True)}
nx.draw_networkx_labels(g, pos, labels=labels, font_color='red')

plt.show()